name: Azure Static Web Apps CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - main

jobs:
  build_and_deploy_job:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest
    name: Build, Apply Terraform & Deploy
    permissions:
       id-token: write
       contents: read
    steps:
      # Checkout du code
      - uses: actions/checkout@v3
        with:
          submodules: true
          lfs: false

      # Installer Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.0'

      # Configurer l'authentification Azure
      - name: Configure Azure Credentials
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Initialiser Terraform dans le répertoire tf/
      - name: Terraform Init
        run: terraform init -input=false
        working-directory: tf

      # Valider la configuration Terraform
      - name: Terraform Validate
        run: terraform validate
        working-directory: tf

      # Planifier la mise à jour des ressources
      - name: Terraform Plan
        run: terraform plan -input=false
        working-directory: tf

      # Appliquer la configuration Terraform
      - name: Terraform Apply
        run: terraform apply -input=false -auto-approve
        working-directory: tf

      # Installer les dépendances pour le déploiement de l'application
      - name: Install OIDC Client from Core Package
        run: npm install @actions/core@1.6.0 @actions/http-client

      # Obtenir le token d'identité GitHub pour le déploiement
      - name: Get Id Token
        uses: actions/github-script@v6
        id: idtoken
        with:
           script: |
               const coredemo = require('@actions/core')
               return await coredemo.getIDToken()
           result-encoding: string

      # Déployer l'application sur Azure Static Web App
      - name: Build And Deploy
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          action: "upload"
          app_location: "/" # Chemin vers le code source de l'application React
          api_location: "" # Chemin vers l'API si tu en as une
          output_location: "dist" # Répertoire où la version construite de l'application se trouve
          github_id_token: ${{ steps.idtoken.outputs.result }}

  close_pull_request_job:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    name: Close Pull Request Job
    steps:
      - name: Close Pull Request
        id: closepullrequest
        uses: Azure/static-web-apps-deploy@v1
        with:
          action: "close"
